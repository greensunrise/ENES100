#include <SoftwareSerial.h> //Lines 1-4 concern libraries and are nessecary
#include <dfr_tank.h> 
#include "enes100.h"
DFRTank tank;

SoftwareSerial mySerial(8, 9); //RX is pin 8, TX is pin 9
enes100::RfClient<SoftwareSerial> rf(&mySerial); 
enes100::Marker marker;
int markerNumber=12; //update this with whatever black and white marker you receive

void setup() {
  mySerial.begin(9600); //this establishes serial communication with
                        //something other than serial monitor, in this
                        //case RF communication with mission control
  Serial.begin(9600); //this establishes regular serial communication
                      //through USB to student's serial monitor

  pinMode(8, INPUT); //since pin 8 is RX, it receives as an input
  pinMode(9, OUTPUT); //since pin 9 is TX, it transmits as an output
  
  rf.resetServer(); //Nessecary to reset connections.
  
  rf.sendMessage("\nWetWare is Connected\n"); //sent to mission control
  Serial.println("Wetware is Connected"); //sent to student's serial monitor

}

void loop() {
  


  float dx = (2.91 - marker.x); float dy = (.37 - marker.y); //Figure out distances from position. 
  
  // The above values must be edited to match the actual place of the water bowl! It is not actually at 3.1, .4. You need to check
  // what the actual value is by running something like "positionfigureoutter" and putting the black+white square right on the bowl.
  
  float thetareq = atan2(dy,dx); //Figure out required angle by using arctan. This puts out a value between -pi and pi.. Make sure this works
  
  rf.sendMessage("\n Orienting...."); //Telling RF that we made it here
  
  float dtheta = thetareq - marker.theta; //Calculates its current angular distance from where it needs to be to go right to the water
  rf.sendMessage("\n dtheta is \n"); rf.sendMessage(dtheta); rf.sendMessage("\n theta is \n");rf.sendMessage(marker.theta);
  do
  {
    tank.setLeftMotorPWM(-250); tank.setRightMotorPWM(250); //It turns anti-clockwise.
      delay(100); //For .1 second, maybe change this?
      tank.setLeftMotorPWM(0); tank.setRightMotorPWM(0); //Turns off motors.
      //Gets the current angle
      float dtheta = thetareq - marker.theta; //Prepares to go through loop again.
      rf.sendMessage("\n Turning Left \n");
      rf.sendMessage(thetareq); rf.sendMessage(marker.theta);
        while(!rf.receiveMarker(&marker, 12)) {
          rf.receiveMarker(&marker,12);
          } 
  } while (dtheta < .2);
        
  do
  { 
      tank.setLeftMotorPWM(250); tank.setRightMotorPWM(-250);
      delay(100); //Change this later? Only turns for .1 sec. 
      tank.setLeftMotorPWM(0); tank.setRightMotorPWM(0);
      float dtheta = thetareq - marker.theta;
      rf.sendMessage("Turning Right");
      while(!rf.receiveMarker(&marker, 12)) {
         rf.receiveMarker(&marker,12);
      } 
    } while(dtheta > .2); { //Angle is too big? It turns CLOCKWISE. 


  do
  {
    tank.setLeftMotorPWM(250);
    tank.setRightMotorPWM(250);
    rf.sendMessage("forward");
   
  }
  while(marker.x < 2.9);

  
   rf.sendMessage("\n marker.theta is"); rf.sendMessage(marker.theta); 
   rf.sendMessage("\n thetareq is");
   rf.sendMessage(thetareq); //Tell RF the current angle and the needed angle.
}
}
