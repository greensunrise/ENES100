//something for you to figure out the position of the b+w square w/o the tank doing anything, just a debug process.

#include <SoftwareSerial.h>
#include <dfr_tank.h>
#include "enes100.h"
const double pi = 3.1415926;
DFRTank tank;

SoftwareSerial mySerial(8, 9); //RX is pin 8, TX is pin 9
enes100::RfClient<SoftwareSerial> rf(&mySerial); 
enes100::Marker marker;
int markerNumber=16; //update this with whatever black and white marker you receive

void setup() {
  // put your setup code here, to run once:
 mySerial.begin(9600); //this establishes serial communication with
                        //something other than serial monitor, in this
                        //case RF communication with mission control
  Serial.begin(9600); //this establishes regular serial communication
                      //through USB to student's serial monitor

  pinMode(8, INPUT); //since pin 8 is RX, it receives as an input
  pinMode(9, OUTPUT); //since pin 9 is TX, it transmits as an output
  
  rf.resetServer();
  rf.sendMessage("\nWetWare is Connected\n"); //sent to mission control
  tank.init();
}

void getpos() {
  while (!rf.receiveMarker(&marker, 16)) { //If it failed...
    rf.sendMessage("It failedto get position.");
  }
  rf.sendMessage("Got position..."); //Good boy
}
void loop() {
  // put your main code here, to run repeatedly:
getpos();
  rf.sendMessage("\n");
  rf.sendMessage("Got position..."); //Good boy
  rf.sendMessage("\n Marker x");
  rf.sendMessage(marker.x);
  rf.sendMessage("\n Marker y");
  rf.sendMessage(marker.y);
  rf.sendMessage("\n Marker theta");
  rf.sendMessage(marker.theta);
  float dx = (2.91 - marker.x); float dy = (.37 - marker.y); //Figure out distances from position
  float thetareq = atan2(dy, dx); //Figure out required angle
  rf.sendMessage("\n Theta Required: ");
  rf.sendMessage(thetareq);
  float dtheta = thetareq - marker.theta;
  rf.sendMessage("dtheta is"); 
  rf.sendMessage(dtheta);
  while (dtheta < .2) {
    rf.sendMessage("\n Less than .2, clockwise rotation.");
    delay(2000);
  }
  while (dtheta > .2) {
    rf.sendMessage("\n Greater than .2, anticlockwise rotation.");
  }
delay(10000);
}
